/**
@function Class
@summary Javascript class implementation
@desc Class function provides possibility to use classical OOP. Modern browsers use prototype based implementation but Internet Explorer 8 uses XDomainRequest hack to provide possibility to use getters and setters by Object.defineProperty method. Each time when you create an instance, the Class function core creates XDomainRequest instance and extends it by given prototype.
@param {object} prototype - Methods and properties
@returns {class} class (or rather costructor of a class)
@example <caption>Usage</caption>
var A = Class({ 
	method1: function() { ... }
}); 
var B = Class({ 
	'extends': A,
	method2: function() { ... }
});
var C = Class({
	'extends': B,
	method2: function() {
		// "this" is execution context
		// arguments is just standard arguments pseudo array
		// next string does the same thing as B.prototype.apply( this, arguments ); does
		C.parent.method2( this, arguments );
	},
	method3: function( a, b ) { ... }
});
var D = Class({
	'extends': C,
	method3: function( a, b ) {
		// you can pass any arguments to the method
		// next string does the same thing as C.prototype.call( this, a, b ); does
		C.parent.method2( this, a, b );
	}
});
@example <caption>AMD way (named modules)</caption>
retuire.config({
	paths: {
		'xclass': 'path/to/matreshka.min',
		'matreshka': 'path/to/matreshka.min',
		'balalaika': 'path/to/matreshka.min'
	}
});
require(['xclass', 'matreshka', 'balalaika'], function(Class, MK, $) {
	var $divs = $( 'div' );
	var MyClass = Class({
		'extends': MK
	});
});
@example <caption>AMD way (unnamed Matreshka module)</caption>
// Matreshka contains Class function as "Class" property and balalaika as "$b" property
require(['path/to/matreshka.min'], function(MK) {
	var $divs = MK.$b( 'div' );
	var MyClass = MK.Class({
		'extends': MK
	});
});
*/

/**
@method Class.instanceOf
@summary Checks is instance of class created by {@link Class} function instanced by given class
@desc You still can use instanceof operator but it doesn't work in Internet Explorer 8 because of XDR hack. 
@param {function} class
@returns {boolean}
@example <caption>Usage</caption>
x = new X;
x.instanceOf( X ); // true
*/

/**
@constructor Class.Interface
@summary Simple interface implementation
@desc Btw <code>Class</code> function supports interfaces. You can create your own Interface constructor that should have <code>.validate</code> method and use it same way as described in examples. Pass interface instance to <code>'implements' property</code>.
@param {Interface} [parent] - parent interface
@param {Array|...string} - interface properties
@example <caption>Basic usage</caption>
var myInterface = new Class.Interface( 'method1', 'method2' );
var MyClass({
	'implements': myInterface,
	method1: function() { ... },
	method2: function() { ... }
});
@example <caption>Method is not implemented in class (error)</caption>
var myInterface = new Class.Interface( 'method1', 'method2' );
var MyClass({
	'implements': myInterface,
	method1: function() { ... },
});
@example <caption>Inheritage</caption>
var interface1 = new Class.Interface( 'method1', 'method2' );
var interface2 = new Class.Interface( interface1, 'method3' );
var MyClass({
	'implements': interface2,
	method1: function() { ... },
	method2: function() { ... },
	method3: function() { ... },
});
*/


/**
@function $b
@version 1.0
@since 0.1
@extends Array
@summary <code>Balalaika</code> DOM utilite

@desc <p>Balalaika is tiny (999 bytes uncompressed) embedded library that makes easier vanilla.js (pure JS) coding. This is individual project and will be presented on github soon.</p>

<p>It's using in {@link http://finom.github.io/matreshka|Matreshka} framework as DOM utilite when jQuery is not defined.</p>

<p>Balalaika extends Array. It means that you can use Array methods such as <code>.forEach</code>, <code>.map</code>, <code>.reduce</code>, <code>.splice</code> and so on.</p>

<p>Balalaika includes 3 own methods: <code>.on</code>, <code>.off</code>, <code>.is</code> and static <code>.extend</code> method that work same way as jQuery analogues (<code>.on</code> doesn't support data). </p>

@example $b( 'div' ).forEach( ... );
@example $b( 'span', document.body ).map( ... );
@example $b( '.button' ).on( 'click.mynamespace', ... );
@example $b( '.button' ).off( 'click.mynamespace' );
@example <caption>AMD way (named modules)</caption>
retuire.config({
	paths: {
		'xclass': 'path/to/matreshka.min',
		'matreshka': 'path/to/matreshka.min',
		'balalaika': 'path/to/matreshka.min'
	}
});
require(['xclass', 'matreshka', 'balalaika'], function(Class, MK, $) {
	var $divs = $( 'div' );
	var MyClass = Class({
		'extends': MK
	});
});
@example <caption>AMD way (unnamed Matreshka module)</caption>
// Matreshka contains Class function as "Class" property and balalaika as "$b" property
require(['path/to/matreshka.min'], function(MK) {
	var $divs = MK.$b( 'div' );
	var MyClass = MK.Class({
		'extends': MK
	});
});
*/
